import streamlit as st
import sqlite3
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold


genai.configure(api_key="API KEY") 

connection=sqlite3.connect("mynew_db.sqlite")
cursor=connection.cursor()

def get_gemma_response(question, prompt):
    model = genai.GenerativeModel("models/gemma-3-1b-it")  
    chat = model.start_chat()

    # combine prompt + message
    full_prompt = f"{prompt[0]}\n\nQuestion: {question}"

    # Generate the response
    response = chat.send_message(
        full_prompt,
        generation_config={
            "temperature": 0.2,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048
        },
        safety_settings={
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
    )
    return response.text.strip()

#  Function to read SQL query from a SQLite DB
def read_sql_query(sql, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    conn.commit()
    conn.close()
    for row in rows:
        print(row)
    return rows

# prompt definition
prompt = [
"""
You are an expert in converting English questions to SQL queries for a SQLite database. Below is the schema of the database, with relationships:


1. Artist (ArtistId, Name)  
2. Album (AlbumId, Title, ArtistId)  
3. Track (TrackId, Name, AlbumId, MediaTypeId, GenreId, Composer, Milliseconds, Bytes, UnitPrice)  
4. MediaType (MediaTypeId, Name)  
5. Genre (GenreId, Name)  
6. Playlist (PlaylistId, Name)  
7. PlaylistTrack (PlaylistId, TrackId)  
8. Invoice (InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total)  
9. InvoiceLine (InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity)  
10. Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId)  
11. Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email)


 Foreign Key Relationships:

- Album.ArtistId â†’ Artist.ArtistId  
- Track.AlbumId â†’ Album.AlbumId  
- Track.GenreId â†’ Genre.GenreId  
- Track.MediaTypeId â†’ MediaType.MediaTypeId  
- PlaylistTrack.TrackId â†’ Track.TrackId  
- PlaylistTrack.PlaylistId â†’ Playlist.PlaylistId  
- Invoice.CustomerId â†’ Customer.CustomerId  
- InvoiceLine.InvoiceId â†’ Invoice.InvoiceId  
- InvoiceLine.TrackId â†’ Track.TrackId  
- Customer.SupportRepId â†’ Employee.EmployeeId  
- Employee.ReportsTo â†’ Employee.EmployeeId

ðŸ“œ Instructions:
1. Convert userâ€™s question into a valid SQLite SQL query.
2. Do not explain the SQL or include any markdown/code formatting.
3. Output only the raw SQL statement.

Examples:

Q: List all albums along with their artist names.  
A: SELECT Album.Title, Artist.Name FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId;

Q: Show customer names and their invoice totals.  
A: SELECT Customer.FirstName, Customer.LastName, Invoice.Total FROM Invoice JOIN Customer ON Invoice.CustomerId = Customer.CustomerId;

Q: Find all tracks with their genre and media type.  
A: SELECT Track.Name, Genre.Name AS Genre, MediaType.Name AS Media FROM Track JOIN Genre ON Track.GenreId = Genre.GenreId JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId;

Now generate a SQL query based on the user's natural language question.
"""
]



# Streamlit app
st.header("Text to sql data")

question = st.text_input("Input:", key="input")
submit = st.button("Ask the question")

if submit:
    try:
        response = get_gemma_response(question, prompt)
        st.subheader("SQL Generated by Gemma:")
        st.code(response)

        data = read_sql_query(response, "mynew_db.sqlite")
        st.subheader("The Response is")
        for row in data:
            st.write(row)
    except Exception as e:
        st.error(f"An error occurred: {e}")
